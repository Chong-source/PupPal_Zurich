"""
© Copyright 2024 Kai Lo and Chong Wan
This file does a few things:
- Utility methods for using TkinterMapView to display a map of Zurich with various pins
- CSV data generation of district latitude and longitude using the Google Geocode API
- Logic for getting the top districts for a given dog breed by proportion
"""
import csv
import os
import tkinter as tk
from tkintermapview import TkinterMapView
import requests

from userdata import User
from graphs import WeightedGraph
from districts import District


def write_district_locations(api_key: str, districts: set[District], csv_path: str) -> None:
    """A function that takes in a new file name, an API_key, and a set of districts to
    create a csv file that contains the latitude and longitude of each district in the following format:
    <name of place>,<latitude>,<longitude>. Pass in the sets of districts by using the load_district_data
    from data loader

    Representation Invariants:
    - districts must be generated by the function load_district_data method from data loader
    """
    if os.path.isfile(csv_path):
        raise FileExistsError  # File must not exist!
    with open(csv_path, 'w') as file:
        csv_writer = csv.writer(file)
        csv_writer.writerow(['district_name', 'latitude', 'longitude'])  # header
        for district in districts:
            search = (f"https://maps.googleapis.com/maps/api/geocode/json?"
                      f"address={district.district_name}%20Zürich%2C%20Switzerland&"
                      f"key={api_key}")
            response = (requests.get(search)).json()
            latitude = response["results"][0]["geometry"]["location"]['lat']
            longitude = response["results"][0]["geometry"]["location"]['lng']
            csv_writer.writerow([district.district_name, latitude, longitude])


def create_map_overlay(title: str, pins: set[tuple[float, float, str]]) -> None:
    """Creates a TKinter window that display a map of Zurich with the set of pins displayed in it.

    Each pin is a tuple with the longitude, latitude, and title.
    Immediately displays it to the user, runs non-blocking.
    """
    master = tk.Toplevel()
    master.geometry("600x600")
    master.title(title)
    master.resizable(False, False)
    map_view = TkinterMapView(master, width=600, height=600, corner_radius=0)
    map_view.pack(fill='both')
    map_view.set_position(47.3769, 8.5417)  # Centered on Zurich
    map_view.set_zoom(12)
    for pin in pins:
        map_view.set_marker(pin[0], pin[1], pin[2])


def get_top_districts(dog_breed: str, districts: set[District], district_graph: WeightedGraph) -> list[District]:
    """Gets the top districts for size vs # of dogs of specific breed.
    Takes the target dog breed, and a weighted district graph that has vertices for all
    districts and dog breeds, with weighted edges between dog breeds and districts representing
    the # of that dog type in the district
    """
    district_size = {}
    district_breed_count = {}
    for district in districts:
        neighbours: set[User] = district_graph.get_neighbours(district)
        district_size[district] = len(neighbours)
        if not district_graph.contains(dog_breed):
            district_breed_count[district] = 0
        else:
            district_breed_count[district] = district_graph.get_weight(district, dog_breed)
    district_ratios = {}
    for district in districts:
        size, breed_count = district_size[district], district_breed_count[district]
        district_ratios[district] = breed_count / size
    district_ratios_sorted = sorted(district_ratios, key=lambda target: district_ratios[target], reverse=True)
    return list(district_ratios_sorted)


if __name__ == '__main__':
    # Writing CSV file: Only needed once to create the csv file
    #   API_key = input("Input API key: ")
    #   district_data_path = input('Path to district data file: ')
    #   new_file_name = input("Input new csv file path: ")
    #   districts: set[District] = data_loader.load_district_data(district_data_path)
    #   write_district_locations(API_key, districts, new_file_name)

    # Create Tkinter window
    window = tk.Tk()
    window.geometry("600x600")
    window.title("Map_of_Zürich")
    window.resizable(False, False)

    # Create google map window
    map_widget = TkinterMapView(window, width=600, height=600, corner_radius=0)
    map_widget.pack(fill='both')

    # Setting the locaiton to Zürich
    map_widget.set_position(47.3769, 8.5417)
    map_widget.set_zoom(12)

    # Plot the locations on the map (examples)
    # marker_2 = map_widget.set_marker(47.384444284588675, 8.574511882827997, 'location1')
    # market_3 = map_widget.set_marker(47.376525305868704, 8.571999516647077, "location2")

    # Running the program
    window.mainloop()
